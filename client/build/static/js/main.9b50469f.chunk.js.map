{"version":3,"sources":["components/WindowSize.js","components/Canvas.js","components/ColorPicker.js","components/Name.js","components/RefreshButton.js","components/Paint.js","Playground.js","index.js","App.js"],"names":["useWindowSize","cb","useState","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","console","log","useEffect","handleResize","addEventListener","removeEventListener","Canvas","React","memo","props","drawing","setDrawing","width","setWidth","height","setHeight","canvasRef","useRef","ctx","current","getContext","stopDrawing","closePath","ref","onMouseDown","e","lineJoin","lineCap","lineWidth","strokeStyle","color","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","startDrawing","onMouseUp","onMouseOut","onMouseMove","coords","lineTo","stroke","handleMouseMove","ColorPicker","colors","activeColor","setActiveColor","length","className","map","i","key","name","type","value","checked","onChange","style","background","Name","setName","target","onClick","setSelectionRange","placeholder","RefreshButton","Paint","setColors","visible","setVisible","timeoutId","clearTimeout","setTimeout","getColors","useCallback","baseColor","randomColor","slice","fetch","then","res","json","hex","headerRef","offsetHeight","borderTop","marginTop","controls","autoPlay","loop","src","num","renderCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b50469f.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useWindowSize(cb) {\r\n  const [[windowWidth, windowHeight], setWindowSize] = useState([\r\n    window.innerWidth,\r\n    window.innerHeight\r\n  ]);\r\n  console.log(\"hello from WindowSize custom hook\");\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      // Allow creating a new canvas upon resize\r\n      cb();\r\n      setWindowSize([window.innerWidth, window.innerHeight]);\r\n    };\r\n\r\n    // Cleanup\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, [cb]);\r\n  return [windowWidth, windowHeight];\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport useWindowSize from \"./WindowSize\";\r\n\r\nconst Canvas = React.memo(props => {\r\n  const [drawing, setDrawing] = useState(false);\r\n  const [width, setWidth] = useState(window.innerWidth);\r\n  const [height, setHeight] = useState(window.innerHeight);\r\n\r\n  const canvasRef = useRef();\r\n  const ctx = useRef();\r\n\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setWidth(window.innerWidth);\r\n    setHeight(window.innerHeight);\r\n  });\r\n\r\n  useEffect(() => {\r\n    ctx.current = canvasRef.current.getContext(\"2d\");\r\n  }, []);\r\n\r\n  console.log(\"hello from Canvas\");\r\n\r\n  const handleMouseMove = e => {\r\n    // Actual Coordinates\r\n    const coords = [\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    ];\r\n\r\n    if (drawing) {\r\n      ctx.current.lineTo(...coords);\r\n      ctx.current.stroke();\r\n    }\r\n  };\r\n\r\n  const startDrawing = e => {\r\n    ctx.current.lineJoin = \"round\";\r\n    ctx.current.lineCap = \"round\";\r\n    ctx.current.lineWidth = 10;\r\n    ctx.current.strokeStyle = props.color;\r\n    ctx.current.beginPath();\r\n    // Actual Coordinates\r\n    ctx.current.moveTo(\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    );\r\n    setDrawing(true);\r\n  };\r\n\r\n  const stopDrawing = () => {\r\n    ctx.current.closePath();\r\n    setDrawing(false);\r\n  };\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={props.width || width}\r\n      height={props.height || height}\r\n      onMouseDown={e => startDrawing(e)}\r\n      onMouseUp={() => stopDrawing()}\r\n      onMouseOut={() => stopDrawing()}\r\n      onMouseMove={e => handleMouseMove(e)}\r\n    />\r\n  );\r\n});\r\n\r\nexport default Canvas;\r\n\r\nCanvas.propTypes = {\r\n  color: PropTypes.string.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n  height: PropTypes.number.isRequired\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst ColorPicker = React.memo(\r\n  ({ colors = [], activeColor, setActiveColor }) => {\r\n    console.log(\"hello from ColorPicker\");\r\n    if (!colors.length) return null;\r\n\r\n    return (\r\n      <fieldset className=\"color-picker\">\r\n        {colors.map((color, i) => (\r\n          <label key={i}>\r\n            <input\r\n              name=\"color\"\r\n              type=\"radio\"\r\n              value={color}\r\n              checked={activeColor === color}\r\n              onChange={() => setActiveColor(color)}\r\n            />\r\n            <span style={{ background: color }} />\r\n          </label>\r\n        ))}\r\n      </fieldset>\r\n    );\r\n  }\r\n);\r\nexport default ColorPicker;\r\n\r\nColorPicker.propTypes = {\r\n  colors: PropTypes.array.isRequired,\r\n  activeColor: PropTypes.string.isRequired,\r\n  setActiveColor: PropTypes.func.isRequired\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nconst Name = React.memo(() => {\r\n  console.log(\"hello from Name\");\r\n  const [name, setName] = useState(\"\");\r\n\r\n  return (\r\n    <label className=\"header-name\">\r\n      <input\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n        placeholder=\"Untitled\"\r\n      />\r\n    </label>\r\n  );\r\n});\r\n\r\nexport default Name;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst RefreshButton = React.memo(({ cb }) => {\r\n  console.log(\"hello from RefreshButton\");\r\n  return (\r\n    <button className=\"button-refresh-colors\" onClick={() => cb()}>\r\n      &#8634; &#9639;\r\n    </button>\r\n  );\r\n});\r\n\r\nexport default RefreshButton;\r\n\r\nRefreshButton.propTypes = {\r\n  cb: PropTypes.func.isRequired\r\n};\r\n","import \"../App.css\";\r\n\r\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nimport Canvas from \"./Canvas\";\r\nimport ColorPicker from \"./ColorPicker\";\r\nimport Name from \"./Name\";\r\nimport RefreshButton from \"./RefreshButton\";\r\nimport randomColor from \"randomcolor\";\r\nimport useWindowSize from \"./WindowSize\";\r\n\r\n// import PropTypes from \"prop-types\";\r\n\r\nconst Paint = () => {\r\n  const [colors, setColors] = useState([]);\r\n  const [activeColor, setActiveColor] = useState(\"\");\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  let timeoutId = useRef();\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setVisible(true);\r\n    clearTimeout(timeoutId.current);\r\n    timeoutId.current = setTimeout(() => setVisible(false), 500);\r\n  });\r\n\r\n  console.log(\"Paint.js State refreshed\");\r\n\r\n  const getColors = useCallback(() => {\r\n    const baseColor = randomColor().slice(1);\r\n    fetch(`/api?baseColor=${baseColor}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        setColors(res.colors.map(color => color.hex.value));\r\n        setActiveColor(res.colors[0].hex.value);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(getColors, []);\r\n\r\n  const headerRef = useRef({ offsetHeight: 0 });\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1 style={{ color: `${activeColor}` }}>&#10024; BeatPaint</h1>\r\n      <header\r\n        ref={headerRef}\r\n        style={{ borderTop: `10px solid ${activeColor}` }}\r\n      >\r\n        <div className=\"app\">\r\n          <Name />\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <ColorPicker\r\n            colors={colors}\r\n            activeColor={activeColor}\r\n            setActiveColor={setActiveColor}\r\n          />\r\n          <RefreshButton cb={getColors} />\r\n        </div>\r\n      </header>\r\n      {/* Canvas component gets replaced every time window.innerHeight or window.innerWidth changes */}\r\n      {/* Workaround would be save a history of the drawing, and reload onto the new, resized canvas */}\r\n      {activeColor && (\r\n        <Canvas\r\n          color={activeColor}\r\n          width={window.innerWidth - 30}\r\n          height={window.innerHeight - headerRef.current.offsetHeight - 180}\r\n        />\r\n      )}\r\n      <div className={`window-size ${visible ? \"\" : \"hidden\"}`}>\r\n        Canvas Size: {windowWidth - 30} x{\" \"}\r\n        {windowHeight - headerRef.current.offsetHeight - 180}, Window Size:\r\n        {windowWidth} x {windowHeight}\r\n      </div>\r\n      <audio controls autoPlay=\"1\" loop=\"1\">\r\n        <source src=\"https://imgur.com/pXwvhFP.mp4\" type=\"audio/mp4\"></source>\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paint;\r\n","import React, {\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport randomColor from \"randomcolor\";\r\n\r\nexport default function Playground() {\r\n  const [count, setCount] = useState(30);\r\n  const inputRef = useRef(); // persistent Ref between renders\r\n\r\n  const [color, setColor] = useState(randomColor());\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  }, [count]);\r\n\r\n  // const calculate = useCallback(<Calculate />, [count]);\r\n  // const cb = useCallback(num => console.log(num), [count]);\r\n  // Note: \"useCallback\" does not appear b/c it's the callback, not result\r\n  useCallback(() => console.log(\"useCallback\")); // returns the function\r\n  useMemo(() => console.log(\"useMemo\")); // returns the result of the function\r\n\r\n  console.log(\"hello from playground_inside\");\r\n  return (\r\n    <div style={{ borderTop: `10px solid ${color}` }}>\r\n      {count}\r\n      <button onClick={() => setCount(currentCount => currentCount - 1)}>\r\n        -\r\n      </button>\r\n      <button onClick={() => setCount(currentCount => currentCount + 1)}>\r\n        +\r\n      </button>\r\n      <button onClick={() => setColor(randomColor())}>Change Color</button>\r\n      <hr />\r\n      <input\r\n        ref={inputRef}\r\n        type=\"range\"\r\n        onChange={e => setCount(e.target.value)}\r\n        value={count}\r\n      />\r\n      {/* <Calculate cb={cb} num={count} /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Calculate = React.memo(({ cb, num }) => {\r\n  cb(num);\r\n  const renderCount = useRef(1);\r\n  return <div>{renderCount.current++}</div>;\r\n});\r\n","import App from \"./App\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import Paint from \"./components/Paint\";\nimport Playground from \"./Playground\";\nimport React from \"react\";\n\nexport default function App() {\n  return (\n    <div>\n      <Paint />\n      {/* <Playground /> */}\n    </div>\n  );\n}\n"],"sourceRoot":""}